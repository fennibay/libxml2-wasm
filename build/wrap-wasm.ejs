const wasmSrc = atob('<%= wasm %>')

const mod = new WebAssembly.Module(Uint8Array.from(wasmSrc, c => c.charCodeAt(0)))

const impObj = WebAssembly.Module.imports(mod)
    .filter(({ kind }) => kind === 'function')
    .reduce(
        (obj, imp) => {
            (obj[imp.module] ||= {})[imp.name] = () => {} // every module is an object, with empty function for each name
            return obj
        },
        {},
    )

async function init() {
    const inst = await WebAssembly.instantiate(mod, impObj);
    inst.exports._initialize()
    return inst
}

const instance = await init();

export default instance;

<% funcs.forEach(function(func) { %>
export const <%= func %> = instance.exports.<%= func %>;
<% }) %>
